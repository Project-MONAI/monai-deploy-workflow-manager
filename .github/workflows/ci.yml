# SPDX-FileCopyrightText: Â© 2021-2022 MONAI Consortium
# SPDX-License-Identifier: Apache License 2.0

name: CI

on:
  push:
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  analyze:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "6.0.x"

    - name: Enable NuGet cache
      uses: actions/cache@v2.1.7
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./src

    - name: Build Solution
      run: dotnet build -c ${{ env.BUILD_CONFIG }} --nologo ${{ env.SOLUTION }}
      working-directory: ./src

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  sca:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Secret detection
        uses: zricethezav/gitleaks-action@master

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build
        run: |
          export VERSION=`cat VERSION`
          ./build.sh
          docker tag monai/workload-manager:$VERSION monai/workload-manager:${{ github.sha }}
      - name: Scan image with Azure Container Scan
        uses: Azure/container-scan@v0
        with:
          image-name: monai/workload-manager:${{ github.sha }}
      - name: Scan image with Anchore
        id: scan
        uses: anchore/scan-action@v2
        with:
          image: monai/workload-manager:${{ github.sha }}
          fail-build: true
          severity-cutoff: high
          acs-report-enable: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Run Unit Test
  #       run: ./run-tests.sh
  #       working-directory: ./src
  #     - uses: codecov/codecov-action@v2
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         directory: ./src/results
  #         files: "**/coverage.opencover.xml"
  #         flags: unittests
  #         name: codecov-umbrella
  #         fail_ci_if_error: true
  #         verbose: true

  unit-test:
    runs-on: ubuntu-latest
    steps:
    
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      # - name: Enable NuGet cache
      #   uses: actions/cache@v2.1.7
      #   with:
      #     path: ~/.nuget/packages
      #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-nuget
      # - uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src
        
      - name: Begin SonarScanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner begin /k:"Project-MONAI_monai-deploy-workflow-manager" /o:"project-monai" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="${{ env.TEST_RESULTS }}/**/*.xml"
        working-directory: ./src

      - name: Run Unit Test
        run: ./run-tests.sh
        working-directory: ./src

      - name: End SonarScanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        working-directory: ./src
          
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./src/results
          files: "**/coverage.opencover.xml"
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  # sonarqube:
  #   runs-on: windows-latest
  #   steps:
  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.11
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Cache SonarCloud packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~\sonar\cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar
  #     - name: Cache SonarCloud scanner
  #       id: cache-sonar-scanner
  #       uses: actions/cache@v1
  #       with:
  #         path: .\.sonar\scanner
  #         key: ${{ runner.os }}-sonar-scanner
  #         restore-keys: ${{ runner.os }}-sonar-scanner
  #     - name: Install SonarCloud scanner
  #       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
  #       shell: powershell
  #       run: |
  #         New-Item -Path .\.sonar\scanner -ItemType Directory
  #         dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
  #     - name: Build and analyze
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       shell: powershell
  #       run: |
  #         .\.sonar\scanner\dotnet-sonarscanner begin /k:"Project-MONAI_monai-deploy-workflow-manager" /o:"project-monai" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
  #         dotnet build -c Release src/Monai.Deploy.WorkloadManager.sln
  #         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
